services:
  server:
    image: motion/motion-server
    build:
      context: ..
      dockerfile_inline: |
        FROM python:3.12-slim
        RUN apt -y -qq update && \
            apt -y -qq install curl
        COPY LICENSE /app/LICENSE
        COPY pyproject.toml /app/pyproject.toml
        COPY src /app/src
        COPY server /app/server
        WORKDIR /app
        RUN pip install -e . && \
            pip install -r server/requirements.txt
        CMD ["/bin/bash", "-lc", "uvicorn server.server:app --host 0.0.0.0 --port 8080"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl","-fsS","http://127.0.0.1:8080/health"]
  nats:
    image: motion/motion-nats
    build:
      context: ..
      dockerfile_inline: |
        FROM nats:alpine
        CMD ["-a", "127.0.0.1", "-m", "8222", "-js", "-sd", "/storage/nats"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=30s CMD ["wget", "-qO", "/dev/null", "http://127.0.0.1:8222/healthz"]
  rtsp:
    image: motion/motion-rtsp
    build:
      context: ..
      dockerfile_inline: |
        FROM bluenviron/mediamtx:latest-ffmpeg
        ENV MTX_API=yes
        HEALTHCHECK --interval=30s --timeout=5s --retries=3 --start-period=10s CMD ["wget", "-qO-", "http://localhost:9997/v3/paths/list"]
  minio:
    image: motion/motion-minio
    build:
      context: ..
      dockerfile_inline: |
        FROM minio/minio:latest
        ENV MINIO_ROOT_USER=username
        ENV MINIO_ROOT_PASSWORD=password
        ENV MINIO_REGION=us-east-1
        CMD ["server", "/storage/minio"]
        HEALTHCHECK --interval=10s --timeout=5s --retries=5 --start-period=30s CMD ["curl", "-fsS", "http://127.0.0.1:9000/minio/health/ready", "-o", "/dev/null"]
  react:
    image: motion/motion-react
    build:
      context: ..
      dockerfile_inline: |
        FROM node:alpine
        COPY LICENSE /app/LICENSE
        COPY react /app/react
        WORKDIR /app/react
        RUN npm ci --no-audit --no-fund
        CMD ["npm", "run", "dev", "--", "--host"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["wget", "-qO", "/dev/null", "http://127.0.0.1:5173"]
  work:
    image: motion/motion-work
    build:
      context: ..
      dockerfile_inline: |
        FROM python:3.12-slim
        RUN apt -y -qq update && \
            apt -y -qq install docker-cli docker-compose curl
        COPY LICENSE /app/LICENSE
        COPY pyproject.toml /app/pyproject.toml
        COPY src /app/src
        COPY server /app/server
        WORKDIR /app
        RUN pip install -e . && \
            pip install -r server/requirements.txt
        CMD ["python3", "-m", "server.work"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
  live:
    image: motion/motion-live
    build:
      context: ..
      dockerfile_inline: |
        FROM opensuse/tumbleweed
        RUN zypper install -y \
            gstreamer \
            gstreamer-plugins-base \
            gstreamer-plugins-good \
            gstreamer-plugins-bad \
            gstreamer-plugins-ugly \
            gstreamer-plugins-rs \
            gstreamer-devel \
            gstreamer-libnice \
            gnu_parallel \
            ffmpeg
        COPY LICENSE /app/LICENSE
        COPY pyproject.toml /app/pyproject.toml
        COPY src /app/src
        COPY server /app/server
        WORKDIR /app
        RUN echo -e '#!/bin/bash \n\
        set  -x \n\
        if [ -z "$${MOTION}" ]; then \n\
          echo "MOTION not set, sleeping" \n\
          sleep infinity \n\
          exit 0 \n\
        fi \n\
        echo python3 -m server.live \n\
        until ffprobe -v error -rtsp_transport tcp rtsp://127.0.0.1:8554/RTSPWriter_World_Scene_CameraA_rgb >/dev/null 2>&1; do \n\
        echo "Waiting for RTSP mount..." \n\
        sleep 2 \n\
        done \n\
        echo gst-launch-1.0 -e rtspsrc location="rtsp://127.0.0.1:8554/RTSPWriter_World_Scene_CameraA_rgb" protocols=tcp latency=200 tcp-timeout=0 name=src  src. ! application/x-rtp,media=video,encoding-name=H265 !  rtph265depay ! h265parse config-interval=-1 !  mp4mux faststart=true streamable=true !  filesink location=/out_hevc.mp4 \n\
        gst-launch-1.0 -e rtspsrc location="rtsp://127.0.0.1:8554/RTSPWriter_World_Scene_CameraA_rgb" protocols=tcp latency=200 tcp-timeout=0 name=src  src. ! application/x-rtp,media=video,encoding-name=H265 !  rtph265depay ! h265parse config-interval=-1 !  splitmuxsink location="/out-%05d.mp4"  max-size-time=$((5*60*1000000000))  muxer=mp4mux \n\
        sleep infinity \n\
        exit 0' >/entrypoint.sh
        RUN chmod +x /entrypoint.sh
        ENTRYPOINT ["/entrypoint.sh"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
  model:
    image: motion/motion-model
    build:
      context: ..
      dockerfile_inline: |
        FROM python:3.12-slim
        RUN apt -y -qq update && \
            apt -y -qq install curl
        COPY LICENSE /app/LICENSE
        COPY server/model.py /app/server/model.py
        COPY server/bounce.py /app/server/bounce.py
        COPY server/remote.py /app/server/remote.py
        COPY server/runner.py /app/server/runner.py
        COPY server/channel.py /app/server/channel.py
        WORKDIR /app
        RUN pip install numpy nats-py
        RUN echo '#!/bin/bash \n\
        set -e -x \n\
        if [ -z "$${MOTION}" ]; then \n\
          echo "MOTION not set, sleeping" \n\
          sleep infinity \n\
          exit 0 \n\
        fi \n\
        exec $(python3 -m server.model) \n\
        exit 0' >/entrypoint.sh
        RUN chmod +x /entrypoint.sh
        ENTRYPOINT ["/entrypoint.sh"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
  runner:
    image: motion/motion-runner
    build:
      context: ..
      dockerfile_inline: |
        FROM python:3.12-slim
        RUN apt -y -qq update && \
            apt -y -qq install curl
        COPY LICENSE /app/LICENSE
        WORKDIR /app
        RUN echo '#!/bin/bash \n\
        set -e -x \n\
        if [ -z "$${MOTION}" ]; then \n\
          echo "MOTION not set, sleeping" \n\
          sleep infinity \n\
          exit 0 \n\
        fi \n\
        sleep infinity \n\
        exit 0' >/entrypoint.sh
        RUN chmod +x /entrypoint.sh
        ENTRYPOINT ["/entrypoint.sh"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
  runner-counter:
    image: motion/motion-runner-counter
    build:
      context: ..
      dockerfile_inline: |
        FROM python:3.12-slim
        RUN apt -y -qq update && \
            apt -y -qq install curl
        COPY LICENSE /app/LICENSE
        COPY pyproject.toml /app/pyproject.toml
        COPY src /app/src
        COPY server /app/server
        WORKDIR /app
        RUN pip install -e . && \
            pip install -r server/requirements.txt
        RUN echo '#!/bin/bash \n\
        set -e -x \n\
        if [ -z "$${MOTION}" ]; then \n\
          echo "MOTION not set, sleeping" \n\
          sleep infinity \n\
          exit 0 \n\
        fi \n\
        python -m server.counter \n\
        exit 0' >/entrypoint.sh
        RUN chmod +x /entrypoint.sh
        ENTRYPOINT ["/entrypoint.sh"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
  runner-isaac:
    image: motion/motion-runner-isaac
    build:
      context: ..
      dockerfile_inline: |
        FROM nvcr.io/nvidia/isaac-sim:5.0.0
        RUN apt -y -qq update && \
            apt -y -qq install curl ffmpeg
        COPY LICENSE /app/LICENSE
        COPY pyproject.toml /app/pyproject.toml
        COPY src /app/src
        COPY server/isaac /isaac-sim/exts/motion.extension
        COPY server/channel.py /isaac-sim/exts/motion.extension/motion/channel.py
        COPY server/interface.py /isaac-sim/exts/motion.extension/motion/interface.py
        ENV ACCEPT_EULA=Y
        ENV PRIVACY_CONSENT=Y
        WORKDIR /app
        RUN /isaac-sim/python.sh -m pip install -e . --no-deps && \
            /isaac-sim/python.sh -m pip install nats-py
        RUN echo '#!/bin/bash \n\
        set -e -x \n\
        if [ -z "$${MOTION}" ]; then \n\
          echo "MOTION not set, sleeping" \n\
          sleep infinity \n\
          exit 0 \n\
        fi \n\
        /isaac-sim/runheadless.sh --enable motion.extension --enable isaacsim.replicator.agent.core  --enable isaacsim.replicator.writers \n\
        exit 0' >/entrypoint.sh
        RUN chmod +x /entrypoint.sh
        ENTRYPOINT ["/entrypoint.sh"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
  runner-ros:
    image: motion/motion-runner-ros
    build:
      context: ..
      dockerfile_inline: |
        FROM ros:jazzy
        RUN apt -y -qq update && \
            apt -y -qq install \
            parallel \
            ros-jazzy-moveit \
            ros-jazzy-moveit-resources-panda-description \
            ros-jazzy-moveit-resources-panda-moveit-config \
            ros-jazzy-ros2-control \
            ros-jazzy-ros2-controllers
        COPY LICENSE /app/LICENSE
        COPY pyproject.toml /app/pyproject.toml
        COPY src /app/src
        COPY server/ros /opt/ros/motion/src
        COPY server/channel.py /opt/ros/motion/src/ros/channel.py
        COPY server/interface.py /opt/ros/motion/src/ros/interface.py
        WORKDIR /app
        RUN apt -y -qq install \
            python3-venv \
            python3-typer \
            python3-httpx
        RUN python3 -m venv --system-site-packages /opt/python
        RUN /opt/python/bin/python3 -m pip install -e . --no-deps && \
            /opt/python/bin/python3 -m pip install nats-py
        RUN (cd /opt/ros/motion && /ros_entrypoint.sh colcon build)
        RUN echo '#!/bin/bash \n\
        set -e -x \n\
        if [ -z "$${MOTION}" ]; then \n\
          echo "MOTION not set, sleeping" \n\
          sleep infinity \n\
          exit 0 \n\
        fi \n\
        source /opt/ros/jazzy/setup.bash \n\
        source /opt/ros/motion/install/setup.bash \n\
        source /opt/python/bin/activate \n\
        parallel --halt now,done=1 --halt now,fail=1 -j 0 ::: "python3 -m ros.motion" "ros2 launch moveit_resources_panda_moveit_config demo.launch.py" "ros2 run topic_tools relay /joint_trajectory /panda_arm_controller/joint_trajectory"\n\
        exit 0' >/entrypoint.sh
        RUN chmod +x /entrypoint.sh
        ENTRYPOINT ["/entrypoint.sh"]
        HEALTHCHECK --interval=10s --timeout=3s --retries=3 --start-period=120s CMD ["curl", "-sf", "http://127.0.0.1:9999/health"]
